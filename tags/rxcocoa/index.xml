<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rxcocoa on rx_marin&lt;blog&gt;</title>
    <link>http://rx-marin.com/tags/rxcocoa/</link>
    <description>Recent content in Rxcocoa on rx_marin&lt;blog&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://rx-marin.com/tags/rxcocoa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>(dotSwift) Unidirectional data flow with RxSwift and RxRealm</title>
      <link>http://rx-marin.com/post/dotswift-rxswift-rxrealm-unidirectional-dataflow/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/dotswift-rxswift-rxrealm-unidirectional-dataflow/</guid>
      <description>In my talk at dotSwift 2017 I start with generic overview of some of the RxSwift basics and move to three complete code examples. In three posts I post the sample code and comment shortly why I chose to highlight these exact examples.
I already posted a write up on the GitHub API search example here: http://rx-marin.com/post/dotswift-search-github-json-api/.
The second post in the series, the one about presenting view controllers, is online here: http://rx-marin.</description>
    </item>
    
    <item>
      <title>(dotSwift) Presenting View Controllers with RxSwift</title>
      <link>http://rx-marin.com/post/dotswift-rxswift-view-controller/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/dotswift-rxswift-view-controller/</guid>
      <description>In my talk at dotSwift 2017 I start with generic overview of some of the RxSwift basics and move to three complete code examples. In three posts I&amp;rsquo;ll post the sample code and comment shortly why I chose to highlight these exact examples.
I already posted a write up on the GitHub API search example here: http://rx-marin.com/post/dotswift-search-github-json-api/. Let&amp;rsquo;s continue with example number two.
Presenting a View Controller from RxSwift RxSwift doesn&amp;rsquo;t neccessarily force you into one architecture or another, it&amp;rsquo;s really up to you to chose how are you going to structure your application.</description>
    </item>
    
    <item>
      <title>(dotSwift) Search GitHub with RxSwift</title>
      <link>http://rx-marin.com/post/dotswift-search-github-json-api/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/dotswift-search-github-json-api/</guid>
      <description>In my talk at dotSwift 2017 I start with generic overview of some of the RxSwift basics and move to three complete code examples. In three posts I&amp;rsquo;ll post the sample code and comment shortly why I chose to highlight these exact examples. Let&amp;rsquo;s start with number one.
Searching for GitHub repositories with RxSwift The first example in the talk is a simple single-screen application that allows the user to enter a repository name (or part of it) and search GitHub for matching results.</description>
    </item>
    
    <item>
      <title>A smarter Retry with RxSwiftExt</title>
      <link>http://rx-marin.com/post/rxswift-retry-with-delay/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-retry-with-delay/</guid>
      <description>Sometimes your observable will fail with an error but that would not mean that you need to give up trying. For example saving to a file might fail because the file is locked temporarily but a split second later would be unlocked and ready for your changes. Same goes for web requests - there might be a temporary glitch in connectivity which could make the observable fail.
RxSwift offers a special operator called retry, which allows you to try another time the observable subscription upon error.</description>
    </item>
    
    <item>
      <title>Implementing state with scan in RxSwift</title>
      <link>http://rx-marin.com/post/rxswift-state-with-scan/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-state-with-scan/</guid>
      <description>Intro Common misconception is that you cannot have state with Rx. Well you can - and there&amp;rsquo;s a special operator that helps you to: scan.
If you&amp;rsquo;ve ever used reduce in Swift - scan is a very similar operator but reduce goes over the complete sequence and gives you the final value of the accumulator while scan emits each intermediate value as well.
If you haven&amp;rsquo;t used reduce - no worries you&amp;rsquo;ll get to understand scan from the examples below.</description>
    </item>
    
    <item>
      <title>Custom bindings with RxSwift</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-bindings/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-bindings/</guid>
      <description>Intro After I did some convenience operators of my own, which really made things easier while writing code I thought I&amp;rsquo;d be a good idea to look into building more stuff on my own.
It helps learning and it&amp;rsquo;s healthy :)
Binding to make a view visible I noticed there is a binding on the hidden property of UIView but sometimes the code just reads better when you don&amp;rsquo;t have to think of hiding something but rather showing something.</description>
    </item>
    
    <item>
      <title>Custom convenience operators with RxSwift, Part 2</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part2/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part2/</guid>
      <description>Intro I got some great feedback on last week&amp;rsquo;s post on convenience operators part 1 so I&amp;rsquo;m really excited to publish part 2, which I hope will be even more interesting for those of you who are looking into RxSwift.
Without further ado let&amp;rsquo;s dive in code&amp;hellip;
A better negate() operator First of all I have a better version of my negate() operator from last week for you. What I wrote on my own was a pretty simple function that looked like so:</description>
    </item>
    
    <item>
      <title>Custom convenience operators with RxSwift, Part 1</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part1/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part1/</guid>
      <description>Intro Just like when learning a new language you need to build up a dictionary to start understanding how the language works, you got to learn the Rx operators and everything will eventually click together.
And then once you have a good common of a language it&amp;rsquo;s okay to start coming up with new words too to boost the expressiveness of your speech and for convenience.
Same thing happened with me last week - for the first time I felt like I&amp;rsquo;m getting work done with RxSwift because I had good understanding how to use at least few operators.</description>
    </item>
    
    <item>
      <title>Split laps timer with RxSwift and RxCocoa: Part 2</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-timer-app-usewithlatest-bindings/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-timer-app-usewithlatest-bindings/</guid>
      <description>&lt;p&gt;In my post from last week I worked on creating a split lapse timer app (&lt;a href=&#34;http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/&#34;&gt;last week&amp;rsquo;s post&lt;/a&gt;). But later on when I was playing with the application I noticed that I naturally would like to have means to start or stop the timer.&lt;/p&gt;

&lt;p&gt;Well this week I am implementing exactly this functionality.&lt;/p&gt;

&lt;p&gt;The first thing I thought about was how to implement state in my app because a timer clearly has two distinct states either running or not running. That got me thinking about combining signals, mapping, you know, all the good stuff.&lt;/p&gt;

&lt;p&gt;If you want to follow along you can download the starter project I prepared. It is in the shape where last weeks blog posts leaves off but I&amp;rsquo;ve added a couple of buttons in the user interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/latimer-new-ui.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Download the starter project to follow along here: &lt;a href=&#34;http://rx-marin.com/zip/rx_laptimer_starter.zip&#34;&gt;rx_laptimer_starter.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s put all those buttons to work!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Split laps timer with RxSwift and RxCocoa</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</guid>
      <description>&lt;p&gt;I was browsing through &lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt; and was totally baffled by the &lt;code&gt;sample&lt;/code&gt; function. The marble diagram looks pretty random at first sight:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/marbles-sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At first I thought - &amp;ldquo;Hey, that second sequence is getting totally ignored!&amp;rdquo;. But after I read the description I figured it out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first sequence&amp;rsquo;s elements is &lt;strong&gt;what&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits, while the second sequence&amp;rsquo;s elements determine &lt;strong&gt;when&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits. So in a way yes - the actual values A, B, C, D do get totally ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it was clear to me what &lt;code&gt;sample&lt;/code&gt; does I started wondering if this function has any practical application :]&lt;/p&gt;

&lt;p&gt;This brought me to creating a split lap timer app to test what &lt;code&gt;sample&lt;/code&gt; can do for me. In the finished project I have a timer emitting time values (aka the first sequence) and I want to grab (or sample) the values whenever the user taps a button (aka the second sequence).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how the marble diagram looks like for the app setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/sample-dia.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And this is how the app looks like when finished:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-finished.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build that app :]&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>