<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rxcocoa on rx_marin&lt;blog&gt;</title>
    <link>http://rx-marin.com/tags/rxcocoa/</link>
    <description>Recent content in Rxcocoa on rx_marin&lt;blog&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rx-marin.com/tags/rxcocoa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Custom convenience operators with RxSwift, Part 2</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part2/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part2/</guid>
      <description>

&lt;h2 id=&#34;intro:46ffa07f8102997fe7674832bad6bc33&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;I got some great feedback on last week&amp;rsquo;s post on convenience operators &lt;a href=&#34;http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part1/&#34;&gt;part 1&lt;/a&gt; so I&amp;rsquo;m really excited to publish part 2, which I hope will be even more interesting for those of you who are looking into RxSwift.&lt;/p&gt;

&lt;p&gt;Without further ado let&amp;rsquo;s dive in code&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;a-better-negate-operator:46ffa07f8102997fe7674832bad6bc33&#34;&gt;A better negate() operator&lt;/h2&gt;

&lt;p&gt;First of all I have a better version of my &lt;code&gt;negate()&lt;/code&gt; operator from last week for you. What I wrote on my own was a pretty simple function that looked like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable where Element: BooleanType {
  public func negate() -&amp;gt; Observable&amp;lt;Bool&amp;gt; {
     return map {value in !value}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t get simpler than that, right? You map a value in a single line of code and that&amp;rsquo;s it (careful, it&amp;rsquo;s a trick question).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tailec.com/&#34;&gt;@tailec&lt;/a&gt; grabbed me in Slack and showed me his version of the same operator, which definitely beats mine:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable where Element: BooleanType {
    public func negate() -&amp;gt; Observable&amp;lt;Bool&amp;gt; {
        return map(!)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup! Since &lt;code&gt;!&lt;/code&gt; is a function with a single parameter you can simply use in conjunction with &lt;code&gt;map&lt;/code&gt; as shown above. That code definitely looks better than mine and I&amp;rsquo;m gonna be using this version in my own projects too. Thanks &lt;a href=&#34;https://twitter.com/tailectailec&#34;&gt;Pawel&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Please guys, if you see something I&amp;rsquo;m posting here that can be improved get in touch, like Pawel did, and help get some awesome rx code out together!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;filternegatives:46ffa07f8102997fe7674832bad6bc33&#34;&gt;filterNegatives()&lt;/h2&gt;

&lt;p&gt;I was looking over my current project&amp;rsquo;s code and trying to identify repeating patterns I can easily &lt;em&gt;outsource&lt;/em&gt; to a convenience operator.&lt;/p&gt;

&lt;p&gt;I noticed I have few &lt;code&gt;Bool&lt;/code&gt; observables that I am sometimes interested in only if they were emitting &lt;code&gt;true&lt;/code&gt; value. For example if we take the code from my &lt;a href=&#34;http://rx-marin.com/post/rxswift-rxcocoa-timer-app-useWithLatest-bindings/&#34;&gt;lap timer post&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let isRunning = [btnPlay.rx_tap.replaceWith(true), btnStop.rx_tap.replaceWith(false)]
  .toObservable()
  .merge()
  .startWith(false)
  .shareReplayLatestWhileConnected()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which produces depending on taps on the play and stop buttons:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;true &amp;mdash; false &amp;mdash; true &amp;mdash; true &amp;ndash;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How about observing only the taps on play? (Except just subscribing to the play button of course)&lt;/p&gt;

&lt;p&gt;Since what I wanted was to basically get rid of the all &lt;code&gt;false&lt;/code&gt; values I wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable where Element: BooleanType {
  public func filterNegatives() -&amp;gt; Observable&amp;lt;Bool&amp;gt; {
     return map {value in value.boolValue}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty easy piece of code, it does the work well and it&amp;rsquo;s clear to read. Great!&lt;/p&gt;

&lt;h2 id=&#34;replacenilwith:46ffa07f8102997fe7674832bad6bc33&#34;&gt;replaceNilWith(_)&lt;/h2&gt;

&lt;p&gt;This was an easy operator to implement. I had a couple of observables emitting optional values and I actually wanted to get a given &lt;em&gt;default&lt;/em&gt; value instead of &lt;code&gt;nil&lt;/code&gt;. I just had to map to a simple condition that checks for a &lt;code&gt;nil&lt;/code&gt; value like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable {
  func replaceNilWith(value: Element) -&amp;gt; Observable&amp;lt;Element&amp;gt; {
     return map {element in element == nil ? value : element}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the elements of the observable are still of type &lt;code&gt;Optional&amp;lt;Element&amp;gt;&lt;/code&gt; but you just never get a &lt;code&gt;nil&lt;/code&gt; value - you get your default value instead.&lt;/p&gt;

&lt;h2 id=&#34;filterout:46ffa07f8102997fe7674832bad6bc33&#34;&gt;filterOut(_)&lt;/h2&gt;

&lt;p&gt;While I was having a lot of momentum I decided to also write a filter that gets rid of specific values. Since the approach is exactly the same as before I&amp;rsquo;ll just add the code here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable where Element: Equatable {
    public func filterOut(targetValue: Element) -&amp;gt; Observable&amp;lt;Element&amp;gt; {
        return self.filter {value in targetValue != value}
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The interesting aspect about this piece of code is that to be able to identify the offending value in your sequence it needs to be &lt;code&gt;Equatable&lt;/code&gt; so you have to restrict the &lt;code&gt;filterOut&lt;/code&gt; operator to only observables that emit &lt;code&gt;Equatable&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;This of course is a walk in the park in Swift where you can just add &lt;code&gt;where Element: Equatable&lt;/code&gt; on your extension.&lt;/p&gt;

&lt;p&gt;The best thing about &lt;code&gt;filterOut(_)&lt;/code&gt; is that whenever I have an observable emitting optional values like for example &lt;code&gt;Observable&amp;lt;Bool?&amp;gt;&lt;/code&gt;, I can ensure no &lt;code&gt;nil&lt;/code&gt; values are emitted like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;optionalBoolSequence.filterOut(nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The observable elements are still of type &lt;code&gt;Optional&amp;lt;Bool&amp;gt;&lt;/code&gt; but now I am sure that the observable never emits a &lt;code&gt;nil&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;And leads me to &amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;unwrap:46ffa07f8102997fe7674832bad6bc33&#34;&gt;unwrap(_)&lt;/h2&gt;

&lt;p&gt;At that point I had two convenience operators to get rid of &lt;code&gt;nil&lt;/code&gt;s in my observables but the elements were still &lt;code&gt;Optional&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, I thought, it could not be so hard to actually unwrap the elements of an &lt;code&gt;Observable&lt;/code&gt; with all the Swift protocols black magic and such!&lt;/p&gt;

&lt;p&gt;Boy, was I &lt;strong&gt;totally&lt;/strong&gt; and &lt;strong&gt;completely&lt;/strong&gt; wrong&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/fry-wrong.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My first realization was that &lt;code&gt;Optional&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a protocol. Thus I couldn&amp;rsquo;t do any protocol black magic with it. Ugh!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt; is actually an enum. Yes - this sounded pretty exciting when Swift 1.0 alpha was out, but honestly right now I&amp;rsquo;d expect that it was a protocol or something more flexible.&lt;/p&gt;

&lt;p&gt;Anywho, since &lt;code&gt;Optional&lt;/code&gt; isn&amp;rsquo;t a protocol I couldn&amp;rsquo;t create an extension on &lt;code&gt;Observable&lt;/code&gt; that matches optional elements. Gulp.&lt;/p&gt;

&lt;p&gt;I had a long long conversation with &lt;a href=&#34;https://twitter.com/mhollemans&#34;&gt;Matthijs&lt;/a&gt; and Ross O&amp;rsquo;Brien in Slack until in the end I could figure out the way&amp;hellip;&lt;/p&gt;

&lt;p&gt;First of all I had to define a protocol for optionals myself. My protocol had to define two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one that checks if the current value is &lt;code&gt;nil&lt;/code&gt; (guess what - simply comparing &lt;code&gt;self&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; didn&amp;rsquo;t really work, yay!)&lt;/li&gt;
&lt;li&gt;another that unwraps &lt;code&gt;self&lt;/code&gt; from &lt;code&gt;Optional&amp;lt;Type&amp;gt;&lt;/code&gt; to &lt;code&gt;Type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The big question that I had to wrap my mind around was: What type is the unwrapped value? I didn&amp;rsquo;t know that in my protocol so I had to define a type that the concrete implementations would set.&lt;/p&gt;

&lt;p&gt;I ended up with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Optionable
{
  typealias WrappedType
  func unwrap() -&amp;gt; WrappedType
  func isEmpty() -&amp;gt; Bool
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool - I had a protocol which I could use to add a method to &lt;code&gt;Observable&lt;/code&gt; via an extension.&lt;/p&gt;

&lt;p&gt;But first I had to make the &lt;code&gt;Optional&lt;/code&gt; enum to conform to &lt;code&gt;Optionable&lt;/code&gt;. So &lt;code&gt;Optional&lt;/code&gt; exposes the type of the wrapped value via &lt;code&gt;Wrapped&lt;/code&gt; and that&amp;rsquo;s where the magic fusion between &lt;code&gt;Optional&lt;/code&gt; and my &lt;code&gt;Optionable&lt;/code&gt; protocol happened.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the declaration of &lt;code&gt;Optional&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public enum Optional&amp;lt;Wrapped&amp;gt; : _Reflectable, NilLiteralConvertible {...}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&amp;rsquo;s how I wired &lt;code&gt;Optionable&lt;/code&gt; to to the type of any concrete optional value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Optional : Optionable
{
    typealias WrappedType = Wrapped
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ha! &lt;em&gt;(Again Matthijs and Ross helped a lot along the way of untangling all of this. I must say that there is very little info online about protocol magic and associated types.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now I could also add the implementation of the two methods in the extension:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func unwrap() -&amp;gt; WrappedType {
    return self!
}

func isEmpty() -&amp;gt; Bool {
    return !(flatMap({_ in true})?.boolValue == true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You guessed it - coding &lt;code&gt;unwrap()&lt;/code&gt; was pretty straight forward, but &lt;code&gt;isEmpty()&lt;/code&gt; caused me serious headache.&lt;/p&gt;

&lt;p&gt;To my surprise (repeating myself here I know), &lt;code&gt;Optional&lt;/code&gt; doesn&amp;rsquo;t give you means to check whether it&amp;rsquo;s empty or not.&lt;/p&gt;

&lt;p&gt;At first I came with this naïve implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func isEmpty() -&amp;gt; Bool {
  switch self {
    case .None: return false
    case .Some(_): return true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, let me tell you: this doesn&amp;rsquo;t work. Although if you ask me it should. But it doesn&amp;rsquo;t - it never falls in the &lt;code&gt;case .None&lt;/code&gt; branch for some reason and is beyond me why.&lt;/p&gt;

&lt;p&gt;So I had to take the hard way, I looked again through everything I can find in an &lt;code&gt;Optional&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/optional-docs.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not much. Not much &amp;hellip;&lt;/p&gt;

&lt;p&gt;Wait! &lt;code&gt;flatMap&lt;/code&gt;? But of course! Here&amp;rsquo;s the (complete) docs on Optional&amp;rsquo;s flatMap:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Returns nil if self is nil, f(self!) otherwise.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I rewrote my &lt;code&gt;isEmpty()&lt;/code&gt; method to use &lt;code&gt;flatMap&lt;/code&gt; and I was off to the races:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func isEmpty() -&amp;gt; Bool {
    return !(flatMap({_ in true})?.boolValue == true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now (&lt;em&gt;finally&lt;/em&gt;) I could get to adding the extension to &lt;code&gt;Observable&lt;/code&gt;. Compared to all the rest I&amp;rsquo;ve been through this was &amp;hellip; let&amp;rsquo;s say &lt;em&gt;not so difficult&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable where Element : Optionable {
  func unwrap() -&amp;gt; Observable&amp;lt;Element.WrappedType&amp;gt; {
    return self
      .filter {value in
        return !value.isEmpty()
      }
      .map {value -&amp;gt; Element.WrappedType in
        value.unwrap()
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notable mentions about that piece of code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m matching the Observable type to &lt;code&gt;Optionable&lt;/code&gt;. &lt;code&gt;Optional&lt;/code&gt; implements &lt;code&gt;Optionable&lt;/code&gt; but if any other type does that &lt;code&gt;unwrap()&lt;/code&gt; will work for it too&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unwrap()&lt;/code&gt; takes in an &lt;code&gt;Element&lt;/code&gt; value and outputs &lt;code&gt;Element.WrappedType&lt;/code&gt;, so for &lt;code&gt;Int?&lt;/code&gt; outputs &lt;code&gt;Int&lt;/code&gt;, for &lt;code&gt;NSDate?&lt;/code&gt; outputs &lt;code&gt;NSDate&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;why not use &lt;code&gt;filterOut(nil)&lt;/code&gt; to get rid of the &lt;code&gt;nil&lt;/code&gt; values? &lt;code&gt;filterOut(_)&lt;/code&gt; works for &lt;code&gt;Equatable&lt;/code&gt; values and &lt;code&gt;Element.WrappedType&lt;/code&gt; might not be &lt;code&gt;Equatable&lt;/code&gt; in some cases&lt;/li&gt;
&lt;li&gt;I had to explicitly set the return type for my &lt;code&gt;map&lt;/code&gt; closure because Xcode thought things were getting a bit too abstract for it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let&amp;rsquo;s see the complete implementation (and if you can think of ways to simplify this please let me know, I still think there should be an easier way):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol Optionable
{
  typealias WrappedType
  func unwrap() -&amp;gt; WrappedType
  func isEmpty() -&amp;gt; Bool
}

extension Optional : Optionable
{
  typealias WrappedType = Wrapped
  func unwrap() -&amp;gt; WrappedType {
    return self!
  }
    
  func isEmpty() -&amp;gt; Bool {
    return !(flatMap({_ in true})?.boolValue == true)
  }
}

extension Observable where Element : Optionable {
  func unwrap() -&amp;gt; Observable&amp;lt;Element.WrappedType&amp;gt; {
    return self
      .filter {value in
        return !value.isEmpty()
      }
      .map {value -&amp;gt; Element.WrappedType in
        value.unwrap()
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well that was a fun day! To be fair I also learned quite a lot about protocols, associated types, etc.&lt;/p&gt;

&lt;p&gt;Later on I was talking to &lt;a href=&#34;https://twitter.com/fpillet&#34;&gt;@fpillet&lt;/a&gt; who shared this piece here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;someOptionalSequence
  .flatMap { $0 == nil ? Observable.empty() : Observable.just($0!) }`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a one liner you can use directly on your Observable of &lt;code&gt;Optional&amp;lt;Element&amp;gt;&lt;/code&gt; type. It does pretty much the same as my &lt;code&gt;unwrap()&lt;/code&gt; operator but it&amp;rsquo;s way shorter because the &lt;code&gt;flatMap&lt;/code&gt; closure doesn&amp;rsquo;t need to specify its return type - it leaves it to Xcode to figure it out out of context.&lt;/p&gt;

&lt;p&gt;I still like my own operator though - I think it&amp;rsquo;s much more readable and it adds less stress to the compiler to write just:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;someOptionalSequence.unwrap()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/unwrap-doge.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:46ffa07f8102997fe7674832bad6bc33&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Creating your own convenience operators is awesome. The code is more readable, there is less opportunity to introduce bugs, and there&amp;rsquo;s nothing wrong with it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m already planning the next post: creating your own Cocoa bindings. If you have done some cool custom bindings for UIKit classes, or any other interesting bindable properties let me know. Woot!&lt;/p&gt;

&lt;p&gt;Do you know a better way to do any of this? Seen a bug? Ping me on Twitter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom convenience operators with RxSwift, Part 1</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part1/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part1/</guid>
      <description>

&lt;h2 id=&#34;intro:00ee3dba4704e83677ebf533fee4350e&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Just like when learning a new language you need to build up a dictionary to start understanding how the language works, you got to learn the Rx operators and everything will eventually click together.&lt;/p&gt;

&lt;p&gt;And then once you have a good common of a language it&amp;rsquo;s okay to start coming up with new words too to boost the expressiveness of your speech and for convenience.&lt;/p&gt;

&lt;p&gt;Same thing happened with me last week - for the first time I felt like I&amp;rsquo;m getting work done with RxSwift because I had good understanding how to use at least few operators. Naturally I wished to create my own custom convenience operators that would not do anything essentially new but will just help me express myself better and clearer.&lt;/p&gt;

&lt;h2 id=&#34;replacewith-value-replace-any-element-with-a-constant:00ee3dba4704e83677ebf533fee4350e&#34;&gt;replaceWith(value): Replace any element with a constant&lt;/h2&gt;

&lt;p&gt;When I just want to react to a certain group of events I replace the actual value emitted so that I can merge two or more Observables into one stream and observe that single stream.&lt;/p&gt;

&lt;p&gt;The following piece of code is from &lt;a href=&#34;http://rx-marin.com/post/rxswift-rxcocoa-timer-app-useWithLatest-bindings/&#34;&gt;last weeks&lt;/a&gt; post and observes the taps on the Start and Stop buttons of the laps timer app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let isRunning = [btnPlay.rx_tap.map({_ in true}), btnStop.rx_tap.map({_ in false})]
	.toObservable()
    .merge()
    .startWith(false)
    .shareReplayLatestWhileConnected()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was looking at this chunk of code and thought that there should be a cleaner, more readable way to represent the mapping parts. What I do there for both observables is to ignore the actual value and replace it with a constant.&lt;/p&gt;

&lt;p&gt;So I dug through the RxSwift code and based on what I found there I put together this brilliant (hic) piece of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func replaceWith&amp;lt;R&amp;gt;(value: R) -&amp;gt; Observable&amp;lt;R&amp;gt; {
    return Observable.create { observer in
        let subscription = self.subscribe { e in
            switch e {
            case .Next(_):
                observer.on(.Next(value))
            case .Error(let error):
                observer.on(.Error(error))
            case .Completed:
                observer.on(.Completed)
            }
        }
        return subscription
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I create and return a new &lt;code&gt;Observable&lt;/code&gt; and pass through the &lt;code&gt;Error&lt;/code&gt; and &lt;code&gt;Completed&lt;/code&gt; events, but replace the value of the &lt;code&gt;Next&lt;/code&gt; event with the &lt;code&gt;value&lt;/code&gt; constant. Seems good?&lt;/p&gt;

&lt;p&gt;What looked like a magnificent piece of code turned out to be a bit of an overkill. I mean after all I just wanted to &amp;ldquo;map&amp;rdquo; any value of any type to a constant and when you say it that way the code almost writes itself! So in the end I rewrote the code like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension ObservableType {
    func replaceWith&amp;lt;R&amp;gt;(value: R) -&amp;gt; Observable&amp;lt;R&amp;gt; {
        return map { _ in value }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see I didn&amp;rsquo;t have to go crazy about the whole thing but just literally take the piece of code I wanted to re-use and abstract it in a method on the &lt;code&gt;ObservableType&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this the same code block from the beginning of the post looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let isRunning = [btnPlay.rx_tap.replaceWith(true), btnStop.rx_tap.replaceWith(false)]
	.toObservable()
    .merge()
    .startWith(false)
    .shareReplayLatestWhileConnected()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awesome! Having my own custom convenience operator made the code less prone to errors (no custom code in a closure to write) and more readable.&lt;/p&gt;

&lt;p&gt;At this point I started doubting myself a bit - this was too good to be true honestly. I thought I must be doing something wrong :)&lt;/p&gt;

&lt;p&gt;However it turned out many people have this exact custom operator in their code base, it apparently solves a common problem.&lt;/p&gt;

&lt;p&gt;Then I got a bit crazy and decided just for fun to explore how much further I can take this.&lt;/p&gt;

&lt;h2 id=&#34;replacewithdate-replace-with-timestamp-of-the-latest-value:00ee3dba4704e83677ebf533fee4350e&#34;&gt;replaceWithDate(): Replace with timestamp of the latest value&lt;/h2&gt;

&lt;p&gt;Since I was already warmed up by putting together &lt;code&gt;replaceWith&lt;/code&gt; I thought it&amp;rsquo;d be fun to have a convenience operator to give me the timestamp of the latest element from the observable sequence.&lt;/p&gt;

&lt;p&gt;In this concrete case the constant I&amp;rsquo;d replace the element with would just be the current date:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension ObservableType {
    func replaceWithDate&amp;lt;R&amp;gt;(value: R) -&amp;gt; Observable&amp;lt;NSDate&amp;gt; {
        return map { _ in NSDate() }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can bind the latest value from an Observable to a label, and show the timestamp of that value in another label like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let count = Observable&amp;lt;Int&amp;gt;
    .interval(3, scheduler: MainScheduler.instance)
    .shareReplay(1)

count.map {counter in &amp;quot;\(counter)&amp;quot;}
    .bindTo(label1.rx_text)
    .addDisposableTo(bag)

count.replaceWithDate()
    .map {$0.description}
    .bindTo(label2.rx_text)
    .addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&amp;rsquo;s the result (wait few seconds to see the increments):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/latest-date.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;negate-negate-the-value-of-the-element:00ee3dba4704e83677ebf533fee4350e&#34;&gt;negate(): Negate the value of the element&lt;/h2&gt;

&lt;p&gt;Next I noticed that sometimes I need to bind an &lt;code&gt;Observable&lt;/code&gt; to &lt;code&gt;rx_enabled&lt;/code&gt; property of a button, and sometimes to &lt;code&gt;rx_hidden&lt;/code&gt;. While writing binding code I had to use numerous &lt;code&gt;map {value in !value}&lt;/code&gt;, which made my code less readable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you check &lt;a href=&#34;http://rx-marin.com/post/rxswift-rxcocoa-timer-app-useWithLatest-bindings/&#34;&gt;last week&amp;rsquo;s post&lt;/a&gt; you will see that in my effort to increase readability I ended up having two observables: one called &lt;code&gt;isRunning&lt;/code&gt; and one &lt;code&gt;isntRunning&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After another read through some of RxSwift&amp;rsquo;s code I learned how to add an operator to an &lt;code&gt;Observable&lt;/code&gt; of a certain type. In my case I wanted to add the &lt;code&gt;negate()&lt;/code&gt; operator to just observables producing &lt;code&gt;Bool&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt; exposes its elements&amp;rsquo; type as &lt;code&gt;Element&lt;/code&gt; and I could easily match this to the &lt;code&gt;BooleanType&lt;/code&gt; (Swift ftw!):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable where Element: BooleanType {
    public func negate() -&amp;gt; Observable&amp;lt;Bool&amp;gt; {
        return map {value in !value}
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet - thanks protocol extensions with associated types! Now I could easily write code like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;active.bindTo(btnStart.rx_enabled).addDisposableTo(bag)
active.negate().bindTo(btnStart.rx_hidden).addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will both enable and show the button whenever &lt;code&gt;active&lt;/code&gt; emits a &lt;code&gt;true&lt;/code&gt; element. Pretty sleek eh?&lt;/p&gt;

&lt;p&gt;To wrap up today&amp;rsquo;s post here&amp;rsquo;s what I&amp;rsquo;ve also added to my project a bit later:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Observable where Element : SignedIntegerType {
    public func negate() -&amp;gt; Observable&amp;lt;E&amp;gt; {
        return map {value in -value}
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;negate()&lt;/code&gt; worked also in other contexts. If you used it on &lt;code&gt;Observable&amp;lt;Bool&amp;gt;&lt;/code&gt; it would apply a logical &lt;code&gt;not&lt;/code&gt; to the value; if you used it on a &lt;code&gt;Observable&amp;lt;Int&amp;gt;&lt;/code&gt; it would produce the negative value of the element. Cool!&lt;/p&gt;

&lt;h2 id=&#34;conclusion:00ee3dba4704e83677ebf533fee4350e&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Creating your own convenience operators is awesome. The code is more readable, there is less opportunity to introduce bugs, and there&amp;rsquo;s nothing wrong with it.&lt;/p&gt;

&lt;p&gt;In my next post I&amp;rsquo;ll look into few more operators I created along the way for myself. Do you want to share any of yours?&lt;/p&gt;

&lt;p&gt;Do you know a better way to do any of this? Seen a bug? Ping me on  Twitter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Split laps timer with RxSwift and RxCocoa: Part 2</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-timer-app-useWithLatest-bindings/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-timer-app-useWithLatest-bindings/</guid>
      <description>&lt;p&gt;In my post from last week I worked on creating a split lapse timer app (&lt;a href=&#34;http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/&#34;&gt;last week&amp;rsquo;s post&lt;/a&gt;). But later on when I was playing with the application I noticed that I naturally would like to have means to start or stop the timer.&lt;/p&gt;

&lt;p&gt;Well this week I am implementing exactly this functionality.&lt;/p&gt;

&lt;p&gt;The first thing I thought about was how to implement state in my app because a timer clearly has two distinct states either running or not running. That got me thinking about combining signals, mapping, you know, all the good stuff.&lt;/p&gt;

&lt;p&gt;If you want to follow along you can download the starter project I prepared. It is in the shape where last weeks blog posts leaves off but I&amp;rsquo;ve added a couple of buttons in the user interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/latimer-new-ui.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Download the starter project to follow along here: &lt;a href=&#34;http://rx-marin.com/zip/rx_laptimer_starter.zip&#34;&gt;rx_laptimer_starter.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s put all those buttons to work!&lt;/p&gt;

&lt;p&gt;My very first idea was to try generating a sequence of values to describe the current state of the timer. The start button would produce &lt;code&gt;true&lt;/code&gt; values and the stop button will produce &lt;code&gt;false&lt;/code&gt; values. When merged I will get one sequence that emits every time the state changes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;o---- (play tap) true--- (stop tap) false --- (play tap) true ---&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So at the top of &lt;code&gt;viewDidLoad()&lt;/code&gt; I created a new Observable like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let isRunning = [btnPlay.rx_tap.map({_ in true}), btnStop.rx_tap.map({_ in false})]
    .toObservable()
    .merge()
    .startWith(false)
    .shareReplayLatestWhileConnected()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First I mapped the taps on &lt;code&gt;btnPlay&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and the taps on &lt;code&gt;btnStop&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and merged them together.&lt;/p&gt;

&lt;p&gt;The Observable starts with a &lt;code&gt;false&lt;/code&gt; value to give the user the opportunity to start the timer at their convenience.&lt;/p&gt;

&lt;p&gt;I printed the values the new observable emits and was quite happy with the result:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;isRunning.subscribeNext({state in
    print(state)
}).addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code printed &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; in the console each time I pressed play or stop. Neato!&lt;/p&gt;

&lt;p&gt;Now it looked very easy to bind that Observable to the buttons&amp;rsquo; &lt;code&gt;rx_enabled&lt;/code&gt; property to actually make the UI reflect the timer state. I could as well hide the laps button when the timer isn&amp;rsquo;t running at all!&lt;/p&gt;

&lt;p&gt;And since some of the controls needed to be enabled when the timer is running and others when it isn&amp;rsquo;t - I made myself yet another observable and bound the controls like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let isntRunning = isRunning.map({running in !running}).shareReplay(1)

isRunning.bindTo(btnStop.rx_enabled).addDisposableTo(bag)
isntRunning.bindTo(btnLap.rx_hidden).addDisposableTo(bag)
isntRunning.bindTo(btnPlay.rx_enabled).addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stop button is enabled while the timer is running. Play is enabled when the timer is paused.&lt;/p&gt;

&lt;p&gt;I really love this kind of code. No &lt;code&gt;if&lt;/code&gt;s no &lt;code&gt;switch&lt;/code&gt;es; once you get the code running it&amp;rsquo;s very difficult to mess up and there&amp;rsquo;s simply no space for introducing bugs. Everything is air-tight.&lt;/p&gt;

&lt;p&gt;The app started with the laps button hidden and only the play button enabled like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-play.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Further you could click play just once because it instantly became disabled. How cool :]&lt;/p&gt;

&lt;p&gt;Now my problem was that even though the UI already reflected the different states of the timer - well &amp;hellip; the timer didn&amp;rsquo;t care at all about any of that :]&lt;/p&gt;

&lt;p&gt;I looked into the &lt;code&gt;RxSwift&lt;/code&gt; implementation of a timer but didn&amp;rsquo;t find a way how to pause it (I guess that it couldn&amp;rsquo;t implement state, who knows &amp;hellip;). That&amp;rsquo;s why I thought I&amp;rsquo;d move away from directly binding the timer to the UI and implement my own counter.&lt;/p&gt;

&lt;p&gt;At the time my timer looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;timer = Observable&amp;lt;NSInteger&amp;gt;.interval(0.1, scheduler: MainScheduler.instance)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, I thought, I just need to somehow combine &lt;code&gt;isRunning&lt;/code&gt; and &lt;code&gt;timer&lt;/code&gt; and filter the observable output when &lt;code&gt;isRunning&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So I did the following: I appended to the existing &lt;code&gt;timer&lt;/code&gt; an operator to combine it with the latest value from &lt;code&gt;isRunning&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.withLatestFrom(isRunning, resultSelector: {_, running in running})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You see that I just ignored the value emitted by &lt;code&gt;timer&lt;/code&gt; since I never use it for anything and return from &lt;code&gt;withLatestFrom&lt;/code&gt; the unchanged &lt;code&gt;running&lt;/code&gt; input parameter:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(Int, Boolean) -&amp;gt; withLatestFrom -&amp;gt; Boolean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next I could simply use &lt;code&gt;filter&lt;/code&gt; to stop the observable from emitting when the timer is not running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.filter({running in running})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And last but not least I had to attach a counter, but that was already something I knew how to do with &lt;code&gt;scan&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.scan(0, accumulator: {(acc, _) in
    return acc+1
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What &lt;code&gt;scan&lt;/code&gt; does above is to count how many times the timer fired while &lt;code&gt;isRunning&lt;/code&gt; was &lt;code&gt;true&lt;/code&gt; (which is exactly what I wanted).&lt;/p&gt;

&lt;p&gt;Finally I had to set the initial value to show in the UI and to share the result between all observers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; .startWith(0)
 .shareReplayLatestWhileConnected()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complete code of the enhanced timer observable looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;timer = Observable&amp;lt;NSInteger&amp;gt;.interval(0.1, scheduler: MainScheduler.instance)
    .withLatestFrom(isRunning, resultSelector: {_, running in running})
    .filter({running in running})
    .scan(0, accumulator: {(acc, _) in
        return acc+1
    })
    .startWith(0)
    .shareReplayLatestWhileConnected()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s a wrap :] Now my timer app had a stateful UI and split lap all implemented without a single &lt;code&gt;if&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-2-final.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can get the completed project from here: &lt;a href=&#34;http://rx-marin.com/zip/rx_laptimer_finished.zip&#34;&gt;rx_laptimer_finished.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you know a better way to do any of this? Seen a bug? Ping me on  Twitter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Split laps timer with RxSwift and RxCocoa</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</guid>
      <description>

&lt;p&gt;I was browsing through &lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt; and was totally baffled by the &lt;code&gt;sample&lt;/code&gt; function. The marble diagram looks pretty random at first sight:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/marbles-sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At first I thought - &amp;ldquo;Hey, that second sequence is getting totally ignored!&amp;rdquo;. But after I read the description I figured it out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first sequence&amp;rsquo;s elements is &lt;strong&gt;what&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits, while the second sequence&amp;rsquo;s elements determine &lt;strong&gt;when&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits. So in a way yes - the actual values A, B, C, D do get totally ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it was clear to me what &lt;code&gt;sample&lt;/code&gt; does I started wondering if this function has any practical application :]&lt;/p&gt;

&lt;p&gt;This brought me to creating a split lap timer app to test what &lt;code&gt;sample&lt;/code&gt; can do for me. In the finished project I have a timer emitting time values (aka the first sequence) and I want to grab (or sample) the values whenever the user taps a button (aka the second sequence).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how the marble diagram looks like for the app setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/sample-dia.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And this is how the app looks like when finished:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-finished.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build that app :]&lt;/p&gt;

&lt;p&gt;Here are the specs I wanted for my split lap timer app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;start the timer at launch&lt;/li&gt;
&lt;li&gt;show the running time in format MM:SS.MS&lt;/li&gt;
&lt;li&gt;when the user taps &amp;ldquo;Split Lap&amp;rdquo; add a split time&lt;/li&gt;
&lt;li&gt;show a table of the split times&lt;/li&gt;
&lt;li&gt;show a table head with the total of laps&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-start-a-timer:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;1 Start a timer&lt;/h3&gt;

&lt;p&gt;Like in my &lt;a href=&#34;http://rx-marin.com/post/rxswift-timer-sequence-manual-dispose-bag/&#34;&gt;previous post&lt;/a&gt; about manually disposing bag&amp;rsquo;s contents I added a timer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var timer: Observable&amp;lt;NSInteger&amp;gt;!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in &lt;code&gt;viewDidLoad&lt;/code&gt; let it run every &lt;code&gt;1/10&lt;/code&gt; of a second (I chose to show only 1 digit for milliseconds so no need to fire more often):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//create the timer
timer = Observable&amp;lt;NSInteger&amp;gt;.interval(0.1, scheduler: MainScheduler.instance)

timer.subscribeNext({ msecs -&amp;gt; Void in
  print(&amp;quot;\(msecs)00ms&amp;quot;)
}).addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This got the timer running and filling up the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000ms
100ms
200ms
300ms
400ms
500ms
600ms
700ms
800ms
900ms
1000ms
1100ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool - that was easy (well, I already knew how to do that part, lol)&lt;/p&gt;

&lt;h3 id=&#34;2-show-the-current-elapsed-time:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;2 Show the current elapsed time&lt;/h3&gt;

&lt;p&gt;This was also a part I already knew how to do. First I put together a little function to take the elapsed time and return a nicely formatted string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func stringFromTimeInterval(ms: NSInteger) -&amp;gt; String {
  return String(format: &amp;quot;%0.2d:%0.2d.%0.1d&amp;quot;,
    arguments: [(ms / 600) % 600, (ms % 600 ) / 10, ms % 10])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then back in &lt;code&gt;viewDidLoad&lt;/code&gt; I used it to bind the timer to a label I added via Interface Builder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//wire the chrono
timer.map(stringFromTimeInterval)
  .bindTo(lblChrono.rx_text)
  .addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I really love how the code flows and tells the story of what should happen:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timer -&amp;gt; 1,2,3 -&amp;gt; stringFromTimeInterval -&amp;gt; &amp;quot;string&amp;quot;, &amp;quot;string&amp;quot; -&amp;gt; lblChrono&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Functional code is awesome because I get 2 huge wins for free: I can easily reuse &lt;code&gt;stringFromTimeInterval&lt;/code&gt; and I can write very simple tests for it.&lt;/p&gt;

&lt;p&gt;At this point the timer label already displayed the elapsed time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-label.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-grab-the-split-time-when-the-user-taps-the-split-lap-button:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;3 Grab the split time when the user taps the &amp;ldquo;Split Lap&amp;rdquo; button&lt;/h3&gt;

&lt;p&gt;Ok here I was supposed to have my ultimate win by using &lt;code&gt;sample&lt;/code&gt;. The first few tries didn&amp;rsquo;t get me far until I realized that the &lt;code&gt;rx_tap&lt;/code&gt; property on &lt;code&gt;UIButton&lt;/code&gt; is also an &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Duh, everything is an &lt;code&gt;Observable&lt;/code&gt; :]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then it was just a matter of calling &lt;code&gt;sample&lt;/code&gt; on my timer and providing as a control sequence the &lt;code&gt;rx_tap&lt;/code&gt; property of the button like so: &lt;code&gt;timer.sample(btnLap.rx_tap)&lt;/code&gt; Whaaaat?&lt;/p&gt;

&lt;p&gt;Now each time I tapped the button &lt;code&gt;sample&lt;/code&gt; emitted the latest value produced by &lt;code&gt;timer&lt;/code&gt;. And since I wasn&amp;rsquo;t interested in the number but in the formatted string I again mapped the result with &lt;code&gt;stringFromTimeInterval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And since I needed to build a list of those split times I used &lt;code&gt;scan&lt;/code&gt;. Actually at first I came around &lt;code&gt;reduce&lt;/code&gt; because I was thinking of accumulating values in a list, but then realized I needed to produce a sequence that emits the list for each new value&amp;hellip; hence I kind of knew I got to use &lt;code&gt;scan&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let lapsSequence = timer.sample(btnLap.rx_tap)
    .map(stringFromTimeInterval)
    .scan([String](), accumulator: {lapTimes, newTime in
        return lapTimes + [newTime]
    })
    .shareReplay(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So - each time &lt;code&gt;sample&lt;/code&gt; emits a new lap time &lt;code&gt;scan&lt;/code&gt; emits an array of all the split times so far.&lt;/p&gt;

&lt;p&gt;Not sure how to explain &lt;code&gt;scan&lt;/code&gt; more simply but I&amp;rsquo;ll try: In RxSwift any time you&amp;rsquo;re thinking of using &lt;code&gt;reduce&lt;/code&gt; chances are you need &lt;code&gt;scan&lt;/code&gt; instead :]&lt;/p&gt;

&lt;h3 id=&#34;4-show-a-table-of-the-split-times-so-far:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;4 Show a table of the split times so far&lt;/h3&gt;

&lt;p&gt;Ok so I got &lt;code&gt;lapsSequence&lt;/code&gt; emit an array of split times. From there (after consulting RxExample) was a walk in the park to wire up the table view:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//show laps in table
lapsSequence.bindTo(tableView.rx_itemsWithCellIdentifier(&amp;quot;Cell&amp;quot;, cellType: UITableViewCell.self)) { (row, element, cell) in
    cell.textLabel!.text = &amp;quot;\(row+1)) \(element)&amp;quot;
}
.addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And my app was already working!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-table.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each time I tap the &amp;ldquo;Split Lap&amp;rdquo; button I get a new split time added in the table view. Sweet!&lt;/p&gt;

&lt;h3 id=&#34;5-show-a-table-header-with-the-number-of-laps:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;5 Show a table header with the number of laps&lt;/h3&gt;

&lt;p&gt;This part was the one that tripped me the most. There wasn&amp;rsquo;t a binding I could use for the table header and I didn&amp;rsquo;t want to complicate the code unneccessarily by adding a section table data source.&lt;/p&gt;

&lt;p&gt;What came to mind was to add a &lt;code&gt;UILabel&lt;/code&gt; property to my view controller and use it as the table header view. Then bind the count of split times to the &lt;code&gt;rx_text&lt;/code&gt; of that label.&lt;/p&gt;

&lt;p&gt;So I added to the view controller class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let tableHeaderView = UILabel()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then an extension to set this label as my table view header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension ViewController: UITableViewDelegate {
  func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -&amp;gt; UIView? {
    return tableHeaderView
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I knew how to set my class as the proxy delegate to the table view (back in &lt;code&gt;viewDidLoad&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//set table delegate
tableView
  .rx_setDelegate(self)
  .addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now came the coup d&amp;rsquo;etat - I had to map &lt;code&gt;lapsSequence&lt;/code&gt; from an array to a single string (e.g. &amp;ldquo;5 laps&amp;rdquo;) and bind that string to the table header.&lt;/p&gt;

&lt;p&gt;I got overexcited about using &lt;code&gt;scan&lt;/code&gt; but the code did feel itchy so after asking around on the RxSwift slack &lt;a href=&#34;https://twitter.com/KrunoslavZaher&#34;&gt;KrunoslavZaher&lt;/a&gt; enlightened me that since I have one array I can turn it into one string by simply using &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the final code addition to &lt;code&gt;viewDidLoad&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//update the table header
lapsSequence.map({ laps -&amp;gt; String in
    return &amp;quot;\t\(laps.count) laps&amp;quot;
})
.startWith(&amp;quot;\tno laps&amp;quot;)
.bindTo(tableHeaderView.rx_text)
.addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since &lt;code&gt;lapsSequence&lt;/code&gt; emits an array of &lt;em&gt;all&lt;/em&gt; split times each time a new split time is emitted I just take that array and return a string with the number of elements.&lt;/p&gt;

&lt;p&gt;Additionally I set the initial value to &amp;ldquo;no laps&amp;rdquo; and that&amp;rsquo;s pretty much it - I bind everything directly to &lt;code&gt;tableHeaderView.rx_text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s the complete working app!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-finished.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can download the completed project and give it a try here: &lt;a href=&#34;http://rx-marin.com/zip/rx_laptimer.zip&#34;&gt;rx_laptimer.zip&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>