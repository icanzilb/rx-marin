<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Observe on rx_marin&lt;blog&gt;</title>
    <link>http://rx-marin.com/tags/observe/</link>
    <description>Recent content in Observe on rx_marin&lt;blog&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://rx-marin.com/tags/observe/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing with RxBlocking, part 1</title>
      <link>http://rx-marin.com/post/rxblocking-part1/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxblocking-part1/</guid>
      <description>Whenever you decide to test your Rx code you have not one but two excellent choices - RxTest and RxBlocking.
In this blog post I&amp;rsquo;ll go over the RxBlocking API and explain shortly how does the libary work. In Part 2 I&amp;rsquo;ll go over a bunch of real-life examples from open source I&amp;rsquo;ve written.
Testing with RxTest  pod RxTest to install it to your test suite from https://github.com/ReactiveX/RxSwift/tree/master/RxTest</description>
    </item>
    
    <item>
      <title>observeOn vs. subscribeOn</title>
      <link>http://rx-marin.com/post/observeon-vs-subscribeon/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/observeon-vs-subscribeon/</guid>
      <description>Cross-thread subscriptions is a question that seems to pop up again and again on the RxSwift Slack channel. The explanation is very simple so I thought it was a good idea to put it in a blog post so whenever needed I can link to it instead of typing everything again and again.
Observable subscriptions The terminology in regard to subscribing and observing is imho a bit messy so let&amp;rsquo;s first take this out of the way (do not skip this section!</description>
    </item>
    
  </channel>
</rss>