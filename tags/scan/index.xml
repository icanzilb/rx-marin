<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scan on rx_marin&lt;blog&gt;</title>
    <link>http://rx-marin.com/tags/scan/</link>
    <description>Recent content in Scan on rx_marin&lt;blog&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://rx-marin.com/tags/scan/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Implementing state with scan in RxSwift</title>
      <link>http://rx-marin.com/post/rxswift-state-with-scan/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-state-with-scan/</guid>
      <description>

&lt;h2 id=&#34;intro:af2be6c694d253c59ac4efd5a73d0daf&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Common misconception is that you cannot have state with Rx. Well you can - and there&amp;rsquo;s a special operator that helps you to: &lt;code&gt;scan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever used &lt;code&gt;reduce&lt;/code&gt; in Swift - scan is a very similar operator but &lt;code&gt;reduce&lt;/code&gt; goes over the complete sequence and gives you the final value of the accumulator while &lt;code&gt;scan&lt;/code&gt; emits each intermediate value as well.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t used &lt;code&gt;reduce&lt;/code&gt; - no worries you&amp;rsquo;ll get to understand &lt;code&gt;scan&lt;/code&gt; from the examples below. Let&amp;rsquo;s get started!&lt;/p&gt;

&lt;h2 id=&#34;creating-a-boolean-switch:af2be6c694d253c59ac4efd5a73d0daf&#34;&gt;Creating a boolean switch&lt;/h2&gt;

&lt;p&gt;When you have to deal with UI you inevitably have to deal with state. Imagine a button that toggles between selected and deselected state as the user taps it repeatedly. One tap - the button is selected, another tap - it&amp;rsquo;s not, a third taps selects it again, etc.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;UIButton.rx_tap&lt;/code&gt; always emits the same value of &lt;code&gt;Void&lt;/code&gt; so it doesn&amp;rsquo;t provide you with any information to decide whether to select or deselect the button. Enter &lt;code&gt;scan&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;scan&lt;/code&gt; takes two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;initial value - you can think of it as the first value of your state&lt;/li&gt;
&lt;li&gt;closure(lastState, newValue) - &lt;code&gt;scan&lt;/code&gt; runs that closure each time it gets a new value - it calls it with two parameters: the last state you had and the value that was just emitted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might wander what the state is? Anything you want it to be (I know&amp;hellip; clich√©s) - it can be a &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, an &lt;code&gt;Array&lt;/code&gt; anything you need for your code. Let&amp;rsquo;s look at the first example to make everything click together.&lt;/p&gt;

&lt;p&gt;I had to make button get selected/deselected as described earlier so I used &lt;code&gt;scan&lt;/code&gt; in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;myButton.rx_tap.scan(false) { lastState, newValue in
    return !lastState
}
.subscribeNext {value in
    print(&amp;quot;tap: \(value)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First of all consider how the &lt;code&gt;scan&lt;/code&gt; above transforms the data stream. It starts with &lt;code&gt;Void&lt;/code&gt; values emitted by &lt;code&gt;rx_tap&lt;/code&gt; but then scan maps those to &lt;code&gt;Bool&lt;/code&gt; values (determined by the type of its &lt;code&gt;return&lt;/code&gt; type):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(tap) &amp;mdash;&amp;gt; Void &amp;mdash;&amp;gt; (scan) &amp;mdash;&amp;gt; Bool &amp;mdash;&amp;gt; (subscribeNext)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So scan starts with a &lt;code&gt;false&lt;/code&gt; state and on each button tap it applies the closure. The first time &lt;code&gt;lastState = false&lt;/code&gt; and &lt;code&gt;newValue = Void&lt;/code&gt; (actually &lt;code&gt;newValue&lt;/code&gt; is always &lt;code&gt;Void&lt;/code&gt; so I&amp;rsquo;ll ignore till the end of this example). You return the negation of &lt;code&gt;lastState&lt;/code&gt;, which is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second time around &lt;code&gt;lastState&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; because this is what you return the first time. And your return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Third time around &lt;code&gt;lastState&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; and you return &lt;code&gt;true&lt;/code&gt;. Etc. etc. etc.&lt;/p&gt;

&lt;p&gt;The console output is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tap: true
tap: false
tap: true
tap: false
tap: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So as you can see you can implement state but it&amp;rsquo;s contained within the closure you supply to &lt;code&gt;scan&lt;/code&gt;. After &lt;code&gt;scan&lt;/code&gt; you get a data stream of the type your closure returns - that&amp;rsquo;s all :)&lt;/p&gt;

&lt;p&gt;So to complete the select/deselect example you just need to bind the &lt;code&gt;scan&lt;/code&gt; result to your button&amp;rsquo;s &lt;code&gt;rx_selected&lt;/code&gt; sink like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;myButton.rx_tap.scan(false) { lastState, newValue in
    return !lastState
}
.bindTo(myButton.rx_selected)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-counter:af2be6c694d253c59ac4efd5a73d0daf&#34;&gt;Creating a counter&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s get beyond alternating between &lt;code&gt;Bool&lt;/code&gt; values and write a code to count how many times a button has been tapped.&lt;/p&gt;

&lt;p&gt;I actually had to do this few times in the last couple months so I&amp;rsquo;ll just put in here the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;myButton.rx_tap.scan(0) { lastCount, newValue in
    return lastCount + 1
}
.subscribeNext {value in
    print(&amp;quot;taps: \(value)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time around the state is of type &lt;code&gt;Int&lt;/code&gt; and it starts with &lt;code&gt;0&lt;/code&gt;. Each time the user taps the button &lt;code&gt;scan&lt;/code&gt; returns the last count plus 1. As the user taps the button the Console shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;taps: 1
taps: 2
taps: 3
taps: 4
taps: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you grasp how the last state thing works it&amp;rsquo;s pretty easy isn&amp;rsquo;t it? :)&lt;/p&gt;

&lt;h2 id=&#34;geting-the-last-n-values:af2be6c694d253c59ac4efd5a73d0daf&#34;&gt;Geting the last N values&lt;/h2&gt;

&lt;p&gt;Somebody in the RxSwift Slack asked for this and it&amp;rsquo;s an interesting (but very simple to solve) example.&lt;/p&gt;

&lt;p&gt;How to get the last N elements from an Observable?&lt;/p&gt;

&lt;p&gt;For example if you have a sequence of &lt;code&gt;Int&lt;/code&gt; values: &lt;code&gt;[0, 1, 2, 3, 4, 5, 6]&lt;/code&gt; how to have the last 3 each time a new value is emitted?&lt;/p&gt;

&lt;p&gt;Well, this smells like having a state since you need to &amp;ldquo;&lt;em&gt;remember&lt;/em&gt;&amp;rdquo; values. So it must be solvable with &lt;code&gt;scan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Obviously the first time the sequence emits you don&amp;rsquo;t have any previous values so the initial state to give to &lt;code&gt;scan&lt;/code&gt; is an empty array &lt;code&gt;[]&lt;/code&gt;. Let&amp;rsquo;s have a look at the complete code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let numbers = [0, 1, 2 , 3, 4, 5, 6].toObservable()

numbers.scan([]) { lastSlice, newValue in
    return Array(lastSlice + [newValue]).suffix(3)
}
.subscribeNext {value in
    print(&amp;quot;last 3: \(value)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time &lt;code&gt;scan&lt;/code&gt; adds the emitted value to the last array you had and than chops 3 elements off the end. Now the data stream looks like so:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(numbers) &amp;mdash;&amp;gt; Int &amp;mdash;&amp;gt; (scan) &amp;mdash;&amp;gt; [Int] &amp;mdash;&amp;gt; subscribeNext&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the Console output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;last 3: [0]
last 3: [0, 1]
last 3: [0, 1, 2]
last 3: [1, 2, 3]
last 3: [2, 3, 4]
last 3: [3, 4, 5]
last 3: [4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But didn&amp;rsquo;t I say I wanted elements of three? Just &lt;code&gt;filter&lt;/code&gt; the output of &lt;code&gt;scan&lt;/code&gt; and check for the length of the emitted array and that&amp;rsquo;s it ;)&lt;/p&gt;

&lt;h2 id=&#34;using-enums-for-state:af2be6c694d253c59ac4efd5a73d0daf&#34;&gt;Using enums for state&lt;/h2&gt;

&lt;p&gt;I didn&amp;rsquo;t have to do any more advanced &lt;code&gt;scan&lt;/code&gt; stuff yet but I can imagine all kinds of uses for it. Let&amp;rsquo;s say you&amp;rsquo;re building a space game.&lt;/p&gt;

&lt;p&gt;When you start a level in your space game your ship has to make it through an asteroid field. Therefore the longer the ship is &amp;ldquo;alive&amp;rdquo; the more points you get, etc.&lt;/p&gt;

&lt;p&gt;So you can build a timer that tracks the level time and bind the level state and the amount of points earned like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum LevelState {
    case Normal, PowerUp
}

let timer = Observable&amp;lt;NSInteger&amp;gt;.interval(0.25, scheduler: MainScheduler.instance)

timer.scan((LevelState.Normal, 0)) { lastState, _ in
    
    switch lastState.0 {
    case .Normal:
        if lastState.1 &amp;gt; 1000 {
            return (.PowerUp, lastState.1 + 30)
        } else {
            return (.Normal, lastState.1 + 30)
        }
    case .PowerUp:
        return (.PowerUp, lastState.1 + 100)
    }
}
.subscribeNext {_, points in
    print(&amp;quot;pts: \(points)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You have two states in your level - normal mode and power-up. Once the player manages to survive past 1,000 points they start gaining more points much faster. To do that you have two states listed in an enum &lt;code&gt;LevelState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The state is a tuple of type &lt;code&gt;(LevelState, Int)&lt;/code&gt; - the first element tracks the current level state, and second is the points counter.&lt;/p&gt;

&lt;p&gt;And this is still a pretty simple example of what is possible with &lt;code&gt;scan&lt;/code&gt; and few lines of code. Woot!&lt;/p&gt;

&lt;p&gt;Look those numbers fly once you&amp;rsquo;re past the &lt;code&gt;1,000&lt;/code&gt; mark!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;pts: 810
pts: 840
pts: 870
pts: 900
pts: 930
pts: 960
pts: 990
pts: 1020
pts: 1050
pts: 1150
pts: 1250
pts: 1350
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:af2be6c694d253c59ac4efd5a73d0daf&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;scan&lt;/code&gt; is simply fantastic and as I wrote in an earlier post - any time you&amp;rsquo;re tempted to use &lt;code&gt;reduce&lt;/code&gt; you probably need &lt;code&gt;scan&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I hope that post has been useful and if you have any operator that bums you out or can&amp;rsquo;t figure out ping me on Twitter - I&amp;rsquo;m also still learning but have few of those figured out pretty well :)&lt;/p&gt;

&lt;p&gt;Do you know a better way to do any of this? Seen a bug? Ping me on Twitter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Split laps timer with RxSwift and RxCocoa</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</guid>
      <description>

&lt;p&gt;I was browsing through &lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt; and was totally baffled by the &lt;code&gt;sample&lt;/code&gt; function. The marble diagram looks pretty random at first sight:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/marbles-sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At first I thought - &amp;ldquo;Hey, that second sequence is getting totally ignored!&amp;rdquo;. But after I read the description I figured it out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first sequence&amp;rsquo;s elements is &lt;strong&gt;what&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits, while the second sequence&amp;rsquo;s elements determine &lt;strong&gt;when&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits. So in a way yes - the actual values A, B, C, D do get totally ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it was clear to me what &lt;code&gt;sample&lt;/code&gt; does I started wondering if this function has any practical application :]&lt;/p&gt;

&lt;p&gt;This brought me to creating a split lap timer app to test what &lt;code&gt;sample&lt;/code&gt; can do for me. In the finished project I have a timer emitting time values (aka the first sequence) and I want to grab (or sample) the values whenever the user taps a button (aka the second sequence).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how the marble diagram looks like for the app setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/sample-dia.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And this is how the app looks like when finished:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-finished.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build that app :]&lt;/p&gt;

&lt;p&gt;Here are the specs I wanted for my split lap timer app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;start the timer at launch&lt;/li&gt;
&lt;li&gt;show the running time in format MM:SS.MS&lt;/li&gt;
&lt;li&gt;when the user taps &amp;ldquo;Split Lap&amp;rdquo; add a split time&lt;/li&gt;
&lt;li&gt;show a table of the split times&lt;/li&gt;
&lt;li&gt;show a table head with the total of laps&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;1-start-a-timer:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;1 Start a timer&lt;/h3&gt;

&lt;p&gt;Like in my &lt;a href=&#34;http://rx-marin.com/post/rxswift-timer-sequence-manual-dispose-bag/&#34;&gt;previous post&lt;/a&gt; about manually disposing bag&amp;rsquo;s contents I added a timer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var timer: Observable&amp;lt;NSInteger&amp;gt;!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in &lt;code&gt;viewDidLoad&lt;/code&gt; let it run every &lt;code&gt;1/10&lt;/code&gt; of a second (I chose to show only 1 digit for milliseconds so no need to fire more often):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//create the timer
timer = Observable&amp;lt;NSInteger&amp;gt;.interval(0.1, scheduler: MainScheduler.instance)

timer.subscribeNext({ msecs -&amp;gt; Void in
  print(&amp;quot;\(msecs)00ms&amp;quot;)
}).addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This got the timer running and filling up the console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;000ms
100ms
200ms
300ms
400ms
500ms
600ms
700ms
800ms
900ms
1000ms
1100ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool - that was easy (well, I already knew how to do that part, lol)&lt;/p&gt;

&lt;h3 id=&#34;2-show-the-current-elapsed-time:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;2 Show the current elapsed time&lt;/h3&gt;

&lt;p&gt;This was also a part I already knew how to do. First I put together a little function to take the elapsed time and return a nicely formatted string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func stringFromTimeInterval(ms: NSInteger) -&amp;gt; String {
  return String(format: &amp;quot;%0.2d:%0.2d.%0.1d&amp;quot;,
    arguments: [(ms / 600) % 600, (ms % 600 ) / 10, ms % 10])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then back in &lt;code&gt;viewDidLoad&lt;/code&gt; I used it to bind the timer to a label I added via Interface Builder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//wire the chrono
timer.map(stringFromTimeInterval)
  .bindTo(lblChrono.rx_text)
  .addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I really love how the code flows and tells the story of what should happen:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timer -&amp;gt; 1,2,3 -&amp;gt; stringFromTimeInterval -&amp;gt; &amp;quot;string&amp;quot;, &amp;quot;string&amp;quot; -&amp;gt; lblChrono&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Functional code is awesome because I get 2 huge wins for free: I can easily reuse &lt;code&gt;stringFromTimeInterval&lt;/code&gt; and I can write very simple tests for it.&lt;/p&gt;

&lt;p&gt;At this point the timer label already displayed the elapsed time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-label.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-grab-the-split-time-when-the-user-taps-the-split-lap-button:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;3 Grab the split time when the user taps the &amp;ldquo;Split Lap&amp;rdquo; button&lt;/h3&gt;

&lt;p&gt;Ok here I was supposed to have my ultimate win by using &lt;code&gt;sample&lt;/code&gt;. The first few tries didn&amp;rsquo;t get me far until I realized that the &lt;code&gt;rx_tap&lt;/code&gt; property on &lt;code&gt;UIButton&lt;/code&gt; is also an &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Duh, everything is an &lt;code&gt;Observable&lt;/code&gt; :]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then it was just a matter of calling &lt;code&gt;sample&lt;/code&gt; on my timer and providing as a control sequence the &lt;code&gt;rx_tap&lt;/code&gt; property of the button like so: &lt;code&gt;timer.sample(btnLap.rx_tap)&lt;/code&gt; Whaaaat?&lt;/p&gt;

&lt;p&gt;Now each time I tapped the button &lt;code&gt;sample&lt;/code&gt; emitted the latest value produced by &lt;code&gt;timer&lt;/code&gt;. And since I wasn&amp;rsquo;t interested in the number but in the formatted string I again mapped the result with &lt;code&gt;stringFromTimeInterval&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And since I needed to build a list of those split times I used &lt;code&gt;scan&lt;/code&gt;. Actually at first I came around &lt;code&gt;reduce&lt;/code&gt; because I was thinking of accumulating values in a list, but then realized I needed to produce a sequence that emits the list for each new value&amp;hellip; hence I kind of knew I got to use &lt;code&gt;scan&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let lapsSequence = timer.sample(btnLap.rx_tap)
    .map(stringFromTimeInterval)
    .scan([String](), accumulator: {lapTimes, newTime in
        return lapTimes + [newTime]
    })
    .shareReplay(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So - each time &lt;code&gt;sample&lt;/code&gt; emits a new lap time &lt;code&gt;scan&lt;/code&gt; emits an array of all the split times so far.&lt;/p&gt;

&lt;p&gt;Not sure how to explain &lt;code&gt;scan&lt;/code&gt; more simply but I&amp;rsquo;ll try: In RxSwift any time you&amp;rsquo;re thinking of using &lt;code&gt;reduce&lt;/code&gt; chances are you need &lt;code&gt;scan&lt;/code&gt; instead :]&lt;/p&gt;

&lt;h3 id=&#34;4-show-a-table-of-the-split-times-so-far:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;4 Show a table of the split times so far&lt;/h3&gt;

&lt;p&gt;Ok so I got &lt;code&gt;lapsSequence&lt;/code&gt; emit an array of split times. From there (after consulting RxExample) was a walk in the park to wire up the table view:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//show laps in table
lapsSequence.bindTo(tableView.rx_itemsWithCellIdentifier(&amp;quot;Cell&amp;quot;, cellType: UITableViewCell.self)) { (row, element, cell) in
    cell.textLabel!.text = &amp;quot;\(row+1)) \(element)&amp;quot;
}
.addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And my app was already working!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-table.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each time I tap the &amp;ldquo;Split Lap&amp;rdquo; button I get a new split time added in the table view. Sweet!&lt;/p&gt;

&lt;h3 id=&#34;5-show-a-table-header-with-the-number-of-laps:1db2c1bfd63c48e8c3c8b2b212141dce&#34;&gt;5 Show a table header with the number of laps&lt;/h3&gt;

&lt;p&gt;This part was the one that tripped me the most. There wasn&amp;rsquo;t a binding I could use for the table header and I didn&amp;rsquo;t want to complicate the code unneccessarily by adding a section table data source.&lt;/p&gt;

&lt;p&gt;What came to mind was to add a &lt;code&gt;UILabel&lt;/code&gt; property to my view controller and use it as the table header view. Then bind the count of split times to the &lt;code&gt;rx_text&lt;/code&gt; of that label.&lt;/p&gt;

&lt;p&gt;So I added to the view controller class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let tableHeaderView = UILabel()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then an extension to set this label as my table view header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension ViewController: UITableViewDelegate {
  func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -&amp;gt; UIView? {
    return tableHeaderView
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I knew how to set my class as the proxy delegate to the table view (back in &lt;code&gt;viewDidLoad&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//set table delegate
tableView
  .rx_setDelegate(self)
  .addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now came the coup d&amp;rsquo;etat - I had to map &lt;code&gt;lapsSequence&lt;/code&gt; from an array to a single string (e.g. &amp;ldquo;5 laps&amp;rdquo;) and bind that string to the table header.&lt;/p&gt;

&lt;p&gt;I got overexcited about using &lt;code&gt;scan&lt;/code&gt; but the code did feel itchy so after asking around on the RxSwift slack &lt;a href=&#34;https://twitter.com/KrunoslavZaher&#34;&gt;KrunoslavZaher&lt;/a&gt; enlightened me that since I have one array I can turn it into one string by simply using &lt;code&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the final code addition to &lt;code&gt;viewDidLoad&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//update the table header
lapsSequence.map({ laps -&amp;gt; String in
    return &amp;quot;\t\(laps.count) laps&amp;quot;
})
.startWith(&amp;quot;\tno laps&amp;quot;)
.bindTo(tableHeaderView.rx_text)
.addDisposableTo(bag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since &lt;code&gt;lapsSequence&lt;/code&gt; emits an array of &lt;em&gt;all&lt;/em&gt; split times each time a new split time is emitted I just take that array and return a string with the number of elements.&lt;/p&gt;

&lt;p&gt;Additionally I set the initial value to &amp;ldquo;no laps&amp;rdquo; and that&amp;rsquo;s pretty much it - I bind everything directly to &lt;code&gt;tableHeaderView.rx_text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s the complete working app!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-finished.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can download the completed project and give it a try here: &lt;a href=&#34;http://rx-marin.com/zip/rx_laptimer.zip&#34;&gt;rx_laptimer.zip&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>