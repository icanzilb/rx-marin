<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rx_marin&lt;blog&gt;</title>
    <link>http://rx-marin.com/</link>
    <description>Recent content on rx_marin&lt;blog&gt;</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://rx-marin.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Binding to a table view with multiple cells and sections</title>
      <link>http://rx-marin.com/post/bind-multiple-cells/</link>
      <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/bind-multiple-cells/</guid>
      <description>One of the questions that keeps popping up in the RxSwift Slack channel for years now is how to display multiple cell types when binding data to a table view.
This is actually very easy to do and in this post I&amp;rsquo;ll show you two distinct ways to display multiple cells in a table view (and it works identically for collection views if that&amp;rsquo;s what you&amp;rsquo;re looking for).
We&amp;rsquo;ll look at the following two use cases:</description>
    </item>
    
    <item>
      <title>Testing with RxBlocking, part 2</title>
      <link>http://rx-marin.com/post/rxblocking-part2/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxblocking-part2/</guid>
      <description>Previously, I wrote about the basics of testing with RxBlocking in Testing with RxBlocking, part1.
Since then, I presented 2 times at meetups about MVVM and RxBlocking and I thought I&amp;rsquo;d post few more examples in a broader context.
But first a question I got several times already when discussing RxBlocking.
When to use RxBlocking vs. RxTest? RxTest is a great library for testing RxSwift code. It offers everything you need to test your Rx code and in most cases it&amp;rsquo;ll be everything you need.</description>
    </item>
    
    <item>
      <title>Testing with RxBlocking, part 1</title>
      <link>http://rx-marin.com/post/rxblocking-part1/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxblocking-part1/</guid>
      <description>Whenever you decide to test your Rx code you have not one but two excellent choices - RxTest and RxBlocking.
In this blog post I&amp;rsquo;ll go over the RxBlocking API and explain shortly how does the libary work. In Part 2 I&amp;rsquo;ll go over a bunch of real-life examples from open source I&amp;rsquo;ve written.
Testing with RxTest  pod RxTest to install it to your test suite from https://github.com/ReactiveX/RxSwift/tree/master/RxTest</description>
    </item>
    
    <item>
      <title>observeOn vs. subscribeOn</title>
      <link>http://rx-marin.com/post/observeon-vs-subscribeon/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/observeon-vs-subscribeon/</guid>
      <description>Cross-thread subscriptions is a question that seems to pop up again and again on the RxSwift Slack channel. The explanation is very simple so I thought it was a good idea to put it in a blog post so whenever needed I can link to it instead of typing everything again and again.
Observable subscriptions The terminology in regard to subscribing and observing is imho a bit messy so let&amp;rsquo;s first take this out of the way (do not skip this section!</description>
    </item>
    
    <item>
      <title>Introducing RxAnimated</title>
      <link>http://rx-marin.com/post/rxanimated-intro/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxanimated-intro/</guid>
      <description>RxCocoa is super powerful for UI bindings - you can use bind(to:) to bind pretty much any kind of observable to a UI Control of your choice. You can bind a String to a UILabel, UIImage to a UIImageView, or an array of objects to UITableView or UICollectionView.
Now, for table and collection view bindings there is a special library to allow you to bind a list of objects called RxDataSources and besides all the other goodness the library can add animations to your bindings.</description>
    </item>
    
    <item>
      <title>Custom property bindings with RxSwift</title>
      <link>http://rx-marin.com/post/rxswift-custom-bindings/</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-custom-bindings/</guid>
      <description>Recently, in one of the few meetups I&amp;rsquo;ve been in person to, someone told me the didn&amp;rsquo;t try RxSwift because somebody told them that RxSwift doesn&amp;rsquo;t support custom views.
While I&amp;rsquo;m still baffled what that original person meant, I thought the best way to disagree is to write a short tutorial to prove them wrong.
What are custom property sinks? When you use RxCocoa bindings you can easily bind the values an observable emits to some view on screen like so:</description>
    </item>
    
    <item>
      <title>Raffling my ticket to NSSpain 2017</title>
      <link>http://rx-marin.com/post/nsspain-ticket/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/nsspain-ticket/</guid>
      <description>This year is the 5th edition of NSSpain - the only international iOS/macOS conference in Spain and one of the best in the world I&amp;rsquo;ve been to. There are many reasons why I think NSSpain is the right way to do a conference, including but not limited to - single track, remote location, and best-in-business speakers&amp;hellip; (And that&amp;rsquo;s why last year I sponsored a student-ticket to NSSpain.)
Speakers receive not only free entry to the full conference and free accomodation, but also tons of love from the organizers.</description>
    </item>
    
    <item>
      <title>First update to the RxSwift book with version 1.1</title>
      <link>http://rx-marin.com/post/rxswift-rxswift-book-update-1.1/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxswift-book-update-1.1/</guid>
      <description>This is a short update about the first update to our RxSwift book.
First of all, we&amp;rsquo;d like to thank all of you who posted to our book errata forum! (and if you haven&amp;rsquo;t hit the forums yet, check &amp;lsquo;em out - it&amp;rsquo;s the best place to report typos, bugs, and more: https://forums.raywenderlich.com/c/books/rxswift ).
I&amp;rsquo;ve worked with the raywenderlich.com team on a number of books and I must say the RxSwift book has had, so far, the most enthusiastic feedback - we&amp;rsquo;ve been drowned in questions, thank you messages, and typo/bugs reports.</description>
    </item>
    
    <item>
      <title>combineLatest beyond the basics</title>
      <link>http://rx-marin.com/post/rxswift-advanced-combine-latest/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-advanced-combine-latest/</guid>
      <description>In the last couple of weeks I got to talk to few people who were either still struggling to understand what exactly does combineLatest do or didn&amp;rsquo;t know about a more recent power feature.
So here it is &amp;hellip; a post about combineLatest!
What does the combineLatest operator do? combineLatest is super useful and it was the first thing in RxSwift that really made see how powerful Rx is and showed me what kind of problems can be easily solved with RxSwift.</description>
    </item>
    
    <item>
      <title>Two free chapters from the RxSwift book!</title>
      <link>http://rx-marin.com/post/rxswift-book-free-chapters/</link>
      <pubDate>Mon, 10 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-book-free-chapters/</guid>
      <description>Last week we announced our brand new RxSwift book (available now)!
The book starts with the very basics in Chapter 1, &amp;ldquo;Hello, world!&amp;rdquo; and leads the reader through a plethora of topics all the way to Chapter 23, &amp;ldquo;MVVM&amp;rdquo; and Chapter 24, &amp;ldquo;Building a complete app with RxSwift&amp;rdquo;.
Being so detailed about RxSwift knowledge already sets the book apart as a great learning source, but what is really special is that it&amp;rsquo;s written by four very active RxSwift community memebers and it&amp;rsquo;s polished by two more editors.</description>
    </item>
    
    <item>
      <title>RxSwift book - available now!</title>
      <link>http://rx-marin.com/post/rxswift-book-available-now/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-book-available-now/</guid>
      <description>After a long time working on this project, I and my friends and colleagues Florent Pillet, Junior Bontognali, Scott Gardner, Ash Furrow, Chris Belanger, and Ray and Vicki Wenderlich are happy to announce that our new book about development with RxSwift is available now!
How it came to be? When I first tried out RxSwift (being excited about it by some of the same people who are my co-authors on the book) I immediately noticed that even though there is plenty of information on the Internet, there isn&amp;rsquo;t a single structured resource where people can learn systematically.</description>
    </item>
    
    <item>
      <title>(dotSwift) Unidirectional data flow with RxSwift and RxRealm</title>
      <link>http://rx-marin.com/post/dotswift-rxswift-rxrealm-unidirectional-dataflow/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/dotswift-rxswift-rxrealm-unidirectional-dataflow/</guid>
      <description>In my talk at dotSwift 2017 I start with generic overview of some of the RxSwift basics and move to three complete code examples. In three posts I post the sample code and comment shortly why I chose to highlight these exact examples.
I already posted a write up on the GitHub API search example here: http://rx-marin.com/post/dotswift-search-github-json-api/.
The second post in the series, the one about presenting view controllers, is online here: http://rx-marin.</description>
    </item>
    
    <item>
      <title>(dotSwift) Presenting View Controllers with RxSwift</title>
      <link>http://rx-marin.com/post/dotswift-rxswift-view-controller/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/dotswift-rxswift-view-controller/</guid>
      <description>In my talk at dotSwift 2017 I start with generic overview of some of the RxSwift basics and move to three complete code examples. In three posts I&amp;rsquo;ll post the sample code and comment shortly why I chose to highlight these exact examples.
I already posted a write up on the GitHub API search example here: http://rx-marin.com/post/dotswift-search-github-json-api/. Let&amp;rsquo;s continue with example number two.
Presenting a View Controller from RxSwift RxSwift doesn&amp;rsquo;t neccessarily force you into one architecture or another, it&amp;rsquo;s really up to you to chose how are you going to structure your application.</description>
    </item>
    
    <item>
      <title>(dotSwift) Search GitHub with RxSwift</title>
      <link>http://rx-marin.com/post/dotswift-search-github-json-api/</link>
      <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/dotswift-search-github-json-api/</guid>
      <description>In my talk at dotSwift 2017 I start with generic overview of some of the RxSwift basics and move to three complete code examples. In three posts I&amp;rsquo;ll post the sample code and comment shortly why I chose to highlight these exact examples. Let&amp;rsquo;s start with number one.
Searching for GitHub repositories with RxSwift The first example in the talk is a simple single-screen application that allows the user to enter a repository name (or part of it) and search GitHub for matching results.</description>
    </item>
    
    <item>
      <title>A smarter Retry with RxSwiftExt</title>
      <link>http://rx-marin.com/post/rxswift-retry-with-delay/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-retry-with-delay/</guid>
      <description>Sometimes your observable will fail with an error but that would not mean that you need to give up trying. For example saving to a file might fail because the file is locked temporarily but a split second later would be unlocked and ready for your changes. Same goes for web requests - there might be a temporary glitch in connectivity which could make the observable fail.
RxSwift offers a special operator called retry, which allows you to try another time the observable subscription upon error.</description>
    </item>
    
    <item>
      <title>Testing your RxSwift code, part 2</title>
      <link>http://rx-marin.com/post/rxswift-rxtests-unit-tests-part-2/</link>
      <pubDate>Mon, 23 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxtests-unit-tests-part-2/</guid>
      <description>In part 1 I looked into writing very basic tests with RxSwift and life was good. But then I wanted to do more and moved on to writing asynchronous tests&amp;hellip;
I contributed the code for RxRealm - the Rx extension for RealmSwift owned by the RxSwiftCommunity. For RxRealm I needed some asynchronous tests because Realm&amp;rsquo;s collections emit notifications (which RxRealm wraps) when the underlaying data changes.
So let&amp;rsquo;s have a look at some of the unit tests I wrote&amp;hellip;</description>
    </item>
    
    <item>
      <title>Testing your RxSwift code, part 1</title>
      <link>http://rx-marin.com/post/rxswift-rxtests-unit-tests/</link>
      <pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxtests-unit-tests/</guid>
      <description>I sat down recently and learned the basics of writing unit tests for RxSwift. It was way easier than I expected and that&amp;rsquo;s why I&amp;rsquo;d like to show few of the tests I got to write.
Before I start on the code itself I just want to mention how great contributing to open source is. If I didn&amp;rsquo;t jump in to helping around on the RxSwift-Ext project I&amp;rsquo;d probably haven&amp;rsquo;t looked into writing unit tests with RxSwift yet, but I did - and that&amp;rsquo;s great.</description>
    </item>
    
    <item>
      <title>App state with Realm and RxSwift</title>
      <link>http://rx-marin.com/post/rxswift-realm-reactive-app-settings/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-realm-reactive-app-settings/</guid>
      <description>Intro This post isn&amp;rsquo;t that much about operators but how to leverage the awesome technology that Realm is.
Long story short - I wanted to submit an app for review and literally just before hitting submit I realized I forgot to implement a favorites filter in one of the view controllers. I would&amp;rsquo;ve quickly hacked something to send it off but since different controllers took care of the navigation bar and the actual table view showing the data could not hack my way around.</description>
    </item>
    
    <item>
      <title>Implementing state with scan in RxSwift</title>
      <link>http://rx-marin.com/post/rxswift-state-with-scan/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-state-with-scan/</guid>
      <description>Intro Common misconception is that you cannot have state with Rx. Well you can - and there&amp;rsquo;s a special operator that helps you to: scan.
If you&amp;rsquo;ve ever used reduce in Swift - scan is a very similar operator but reduce goes over the complete sequence and gives you the final value of the accumulator while scan emits each intermediate value as well.
If you haven&amp;rsquo;t used reduce - no worries you&amp;rsquo;ll get to understand scan from the examples below.</description>
    </item>
    
    <item>
      <title>Custom bindings with RxSwift</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-bindings/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-bindings/</guid>
      <description>Intro After I did some convenience operators of my own, which really made things easier while writing code I thought I&amp;rsquo;d be a good idea to look into building more stuff on my own.
It helps learning and it&amp;rsquo;s healthy :)
Binding to make a view visible I noticed there is a binding on the hidden property of UIView but sometimes the code just reads better when you don&amp;rsquo;t have to think of hiding something but rather showing something.</description>
    </item>
    
    <item>
      <title>Custom convenience operators with RxSwift, Part 2</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part2/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part2/</guid>
      <description>Intro I got some great feedback on last week&amp;rsquo;s post on convenience operators part 1 so I&amp;rsquo;m really excited to publish part 2, which I hope will be even more interesting for those of you who are looking into RxSwift.
Without further ado let&amp;rsquo;s dive in code&amp;hellip;
A better negate() operator First of all I have a better version of my negate() operator from last week for you. What I wrote on my own was a pretty simple function that looked like so:</description>
    </item>
    
    <item>
      <title>Custom convenience operators with RxSwift, Part 1</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part1/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-custom-convenience-operators-part1/</guid>
      <description>Intro Just like when learning a new language you need to build up a dictionary to start understanding how the language works, you got to learn the Rx operators and everything will eventually click together.
And then once you have a good common of a language it&amp;rsquo;s okay to start coming up with new words too to boost the expressiveness of your speech and for convenience.
Same thing happened with me last week - for the first time I felt like I&amp;rsquo;m getting work done with RxSwift because I had good understanding how to use at least few operators.</description>
    </item>
    
    <item>
      <title>Split laps timer with RxSwift and RxCocoa: Part 2</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-timer-app-usewithlatest-bindings/</link>
      <pubDate>Mon, 22 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-timer-app-usewithlatest-bindings/</guid>
      <description>&lt;p&gt;In my post from last week I worked on creating a split lapse timer app (&lt;a href=&#34;http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/&#34;&gt;last week&amp;rsquo;s post&lt;/a&gt;). But later on when I was playing with the application I noticed that I naturally would like to have means to start or stop the timer.&lt;/p&gt;

&lt;p&gt;Well this week I am implementing exactly this functionality.&lt;/p&gt;

&lt;p&gt;The first thing I thought about was how to implement state in my app because a timer clearly has two distinct states either running or not running. That got me thinking about combining signals, mapping, you know, all the good stuff.&lt;/p&gt;

&lt;p&gt;If you want to follow along you can download the starter project I prepared. It is in the shape where last weeks blog posts leaves off but I&amp;rsquo;ve added a couple of buttons in the user interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/latimer-new-ui.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Download the starter project to follow along here: &lt;a href=&#34;http://rx-marin.com/zip/rx_laptimer_starter.zip&#34;&gt;rx_laptimer_starter.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s put all those buttons to work!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Split laps timer with RxSwift and RxCocoa</title>
      <link>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-rxcocoa-sample-split-laps-timer/</guid>
      <description>&lt;p&gt;I was browsing through &lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt; and was totally baffled by the &lt;code&gt;sample&lt;/code&gt; function. The marble diagram looks pretty random at first sight:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/marbles-sample.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At first I thought - &amp;ldquo;Hey, that second sequence is getting totally ignored!&amp;rdquo;. But after I read the description I figured it out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first sequence&amp;rsquo;s elements is &lt;strong&gt;what&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits, while the second sequence&amp;rsquo;s elements determine &lt;strong&gt;when&lt;/strong&gt; &lt;code&gt;sample&lt;/code&gt; emits. So in a way yes - the actual values A, B, C, D do get totally ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it was clear to me what &lt;code&gt;sample&lt;/code&gt; does I started wondering if this function has any practical application :]&lt;/p&gt;

&lt;p&gt;This brought me to creating a split lap timer app to test what &lt;code&gt;sample&lt;/code&gt; can do for me. In the finished project I have a timer emitting time values (aka the first sequence) and I want to grab (or sample) the values whenever the user taps a button (aka the second sequence).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how the marble diagram looks like for the app setup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/sample-dia.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And this is how the app looks like when finished:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://rx-marin.com/images/laptimer-finished.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s build that app :]&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Manually disposing a bag and creating a timer</title>
      <link>http://rx-marin.com/post/rxswift-timer-sequence-manual-dispose-bag/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rx-marin.com/post/rxswift-timer-sequence-manual-dispose-bag/</guid>
      <description>&lt;p&gt;I was reading through the &lt;a href=&#34;https://github.com/ReactiveX/RxSwift/tree/master/Documentation&#34;&gt;RxSwift docs&lt;/a&gt; and did a little test to see if I understood manual disposing. As the example made a lot of sense I thought it&amp;rsquo;s not a bad idea to share it online.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>